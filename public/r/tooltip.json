{
    "name": "tooltip",
    "type": "registry:component",
    "title": "Tooltip",
    "description": "A cool way to give your users a hint of what a component does...ðŸ˜‰",
    "dependencies": ["@radix-ui/react-tooltip", "class-variance-authority"],
    "author": "Ankan Bhattacharya <https://github.com/ankan002>",
    "files": [
        {
            "path": "components/ui/Tooltip.tsx",
            "target": "components/retroui/Tooltip.tsx",
            "type": "registry:component",
            "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\";\n\nimport { cn } from \"@/lib/utils\";\nimport { cva, VariantProps } from \"class-variance-authority\";\n\nconst tooltipContentVariants = cva(\n    \"z-50 overflow-hidden border-2 border-border bg-background px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n    {\n        variants: {\n            variant: {\n                default: \"bg-background text-foreground\",\n                primary: \"bg-primary text-foreground\",\n                solid: \"bg-solid text-solid-foreground\",\n            },\n        },\n        defaultVariants: {\n            variant: \"default\",\n        },\n    },\n);\n\nconst TooltipProvider = TooltipPrimitive.Provider;\n\nconst Tooltip = TooltipPrimitive.Root;\n\nconst TooltipTrigger = TooltipPrimitive.Trigger;\n\nconst TooltipContent = React.forwardRef<\n    React.ElementRef<typeof TooltipPrimitive.Content>,\n    React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content> &\n        VariantProps<typeof tooltipContentVariants>\n>(({ className, sideOffset = 4, variant, ...props }, ref) => (\n    <TooltipPrimitive.Portal>\n        <TooltipPrimitive.Content\n            ref={ref}\n            sideOffset={sideOffset}\n            className={cn(\n                tooltipContentVariants({\n                    variant,\n                    className,\n                }),\n            )}\n            {...props}\n        />\n    </TooltipPrimitive.Portal>\n));\nTooltipContent.displayName = TooltipPrimitive.Content.displayName;\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };\n"
        }
    ]
}
